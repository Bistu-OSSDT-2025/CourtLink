package com.courtlink.booking.repository;

import com.courtlink.booking.entity.Appointment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Ô¤Ô¼ï¿½ï¿½ï¿½Ý·ï¿½ï¿½Ê²ï¿½Ó¿ï¿?
 * 
 * @author Your Name
 * @version 1.0.0
 */
@Repository
public interface AppointmentRepository extends JpaRepository<Appointment, Long> {

    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½Ã»ï¿½IDï¿½ï¿½Ñ¯Ô¤Ô¼ï¿½Ð±ï¿½
     * 
     * @param userId ï¿½Ã»ï¿½ID
     * @param pageable ï¿½ï¿½Ò³ï¿½ï¿½ï¿½ï¿½
     * @return Ô¤Ô¼ï¿½ï¿½Ò³ï¿½Ð±ï¿½
     */
    Page<Appointment> findByUserIdOrderByStartTimeDesc(String userId, Pageable pageable);

    /**
     * ï¿½ï¿½ï¿½Ý·ï¿½ï¿½ï¿½ï¿½á¹©ï¿½ï¿½IDï¿½ï¿½Ñ¯Ô¤Ô¼ï¿½Ð±ï¿½
     * 
     * @param providerId ï¿½ï¿½ï¿½ï¿½ï¿½á¹©ï¿½ï¿½ID
     * @param pageable ï¿½ï¿½Ò³ï¿½ï¿½ï¿½ï¿½
     * @return Ô¤Ô¼ï¿½ï¿½Ò³ï¿½Ð±ï¿½
     */
    Page<Appointment> findByProviderIdOrderByStartTimeDesc(String providerId, Pageable pageable);

    /**
     * ï¿½ï¿½ï¿½ï¿½×´Ì¬ï¿½ï¿½Ñ¯Ô¤Ô¼ï¿½Ð±ï¿½
     * 
     * @param status Ô¤Ô¼×´Ì¬
     * @param pageable ï¿½ï¿½Ò³ï¿½ï¿½ï¿½ï¿½
     * @return Ô¤Ô¼ï¿½ï¿½Ò³ï¿½Ð±ï¿½
     */
    Page<Appointment> findByStatusOrderByStartTimeDesc(Appointment.AppointmentStatus status, Pageable pageable);

    /**
     * ï¿½ï¿½Ñ¯Ö¸ï¿½ï¿½Ê±ï¿½ä·¶Î§ï¿½Úµï¿½Ô¤Ô¼
     * 
     * @param startTime ï¿½ï¿½Ê¼Ê±ï¿½ï¿½
     * @param endTime ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½
     * @param status Ô¤Ô¼×´Ì¬
     * @return Ô¤Ô¼ï¿½Ð±ï¿½
     */
    @Query("SELECT a FROM Appointment a WHERE a.startTime >= :startTime AND a.endTime <= :endTime AND a.status = :status")
    List<Appointment> findByTimeRangeAndStatus(@Param("startTime") LocalDateTime startTime,
                                              @Param("endTime") LocalDateTime endTime,
                                              @Param("status") Appointment.AppointmentStatus status);

    /**
     * ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½Í»
     * 
     * @param providerId ï¿½ï¿½ï¿½ï¿½ï¿½á¹©ï¿½ï¿½ID
     * @param startTime ï¿½ï¿½Ê¼Ê±ï¿½ï¿½
     * @param endTime ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½
     * @param excludeId ï¿½Å³ï¿½ï¿½ï¿½Ô¤Ô¼IDï¿½ï¿½ï¿½ï¿½ï¿½Ú¸ï¿½ï¿½ï¿½Ê±ï¿½ï¿½
     * @return ï¿½ï¿½Í»ï¿½ï¿½Ô¤Ô¼ï¿½Ð±ï¿½
     */
    @Query("SELECT a FROM Appointment a WHERE a.providerId = :providerId " +
           "AND a.status NOT IN ('CANCELLED', 'EXPIRED') " +
           "AND ((a.startTime < :endTime AND a.endTime > :startTime) " +
           "OR (a.startTime = :startTime AND a.endTime = :endTime)) " +
           "AND (:excludeId IS NULL OR a.id != :excludeId)")
    List<Appointment> findConflictingAppointments(@Param("providerId") String providerId,
                                                 @Param("startTime") LocalDateTime startTime,
                                                 @Param("endTime") LocalDateTime endTime,
                                                 @Param("excludeId") Long excludeId);

    /**
     * ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Úµï¿½Ô¤Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½Ú·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ£ï¿½
     * 
     * @param startTime ï¿½ï¿½Ê¼Ê±ï¿½ï¿½
     * @param endTime ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½
     * @param status Ô¤Ô¼×´Ì¬
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Úµï¿½Ô¤Ô¼ï¿½Ð±ï¿½
     */
    @Query("SELECT a FROM Appointment a WHERE a.startTime BETWEEN :startTime AND :endTime " +
           "AND a.status = :status")
    List<Appointment> findUpcomingAppointments(@Param("startTime") LocalDateTime startTime,
                                              @Param("endTime") LocalDateTime endTime,
                                              @Param("status") Appointment.AppointmentStatus status);

    /**
     * ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½Úµï¿½Ô¤Ô¼
     * 
     * @param currentTime ï¿½ï¿½Ç°Ê±ï¿½ï¿½
     * @param status Ô¤Ô¼×´Ì¬
     * @return ï¿½ï¿½ï¿½Úµï¿½Ô¤Ô¼ï¿½Ð±ï¿½
     */
    @Query("SELECT a FROM Appointment a WHERE a.endTime < :currentTime AND a.status = :status")
    List<Appointment> findExpiredAppointments(@Param("currentTime") LocalDateTime currentTime,
                                             @Param("status") Appointment.AppointmentStatus status);

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½IDï¿½ï¿½Ñ¯Ô¤Ô¼
     * 
     * @param paymentId Ö§ï¿½ï¿½ID
     * @return Ô¤Ô¼ï¿½ï¿½Ï¢
     */
    Optional<Appointment> findByPaymentId(String paymentId);

    /**
     * Í³ï¿½ï¿½ï¿½Ã»ï¿½Ô¤Ô¼ï¿½ï¿½ï¿½ï¿½
     * 
     * @param userId ï¿½Ã»ï¿½ID
     * @param status Ô¤Ô¼×´Ì¬
     * @return Ô¤Ô¼ï¿½ï¿½ï¿½ï¿½
     */
    long countByUserIdAndStatus(String userId, Appointment.AppointmentStatus status);

    /**
     * Í³ï¿½Æ·ï¿½ï¿½ï¿½ï¿½á¹©ï¿½ï¿½Ô¤Ô¼ï¿½ï¿½ï¿½ï¿½
     * 
     * @param providerId ï¿½ï¿½ï¿½ï¿½ï¿½á¹©ï¿½ï¿½ID
     * @param status Ô¤Ô¼×´Ì¬
     * @return Ô¤Ô¼ï¿½ï¿½ï¿½ï¿½
     */
    long countByProviderIdAndStatus(String providerId, Appointment.AppointmentStatus status);
} 

package com.courtlink.booking.service;

import com.courtlink.booking.entity.Payment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¿ï¿?
 * 
 * @author Your Name
 * @version 1.0.0
 */
public interface PaymentService {

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * 
     * @param payment Ö§ï¿½ï¿½ï¿½ï¿½Ï¢
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     */
    Payment createPayment(Payment payment);

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½
     * 
     * @param paymentNo Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param paymentMethod Ö§ï¿½ï¿½ï¿½ï¿½Ê½
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
     */
    Payment processPayment(String paymentNo, Payment.PaymentMethod paymentMethod);

    /**
     * Ä£ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * 
     * @param paymentNo Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
     */
    Payment processMockPayment(String paymentNo);

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½Øµï¿½
     * 
     * @param paymentNo Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param transactionId ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ID
     * @param success ï¿½Ç·ï¿½É¹ï¿?
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
     */
    Payment handlePaymentCallback(String paymentNo, String transactionId, boolean success);

    /**
     * ï¿½Ë¿î´¦ï¿½ï¿½
     * 
     * @param paymentNo Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param refundAmount ï¿½Ë¿ï¿½ï¿½ï¿½
     * @param reason ï¿½Ë¿ï¿½Ô­ï¿½ï¿½
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
     */
    Payment processRefund(String paymentNo, BigDecimal refundAmount, String reason);

    /**
     * È¡ï¿½ï¿½Ö§ï¿½ï¿½
     * 
     * @param paymentNo Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @return È¡ï¿½ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
     */
    Payment cancelPayment(String paymentNo);

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å²ï¿½Ñ¯Ö§ï¿½ï¿½ï¿½ï¿½Ï¢
     * 
     * @param paymentNo Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @return Ö§ï¿½ï¿½ï¿½ï¿½Ï¢
     */
    Payment getPaymentByPaymentNo(String paymentNo);

    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½Ã»ï¿½IDï¿½ï¿½Ñ¯Ö§ï¿½ï¿½ï¿½Ð±ï¿½
     * 
     * @param userId ï¿½Ã»ï¿½ID
     * @param pageable ï¿½ï¿½Ò³ï¿½ï¿½ï¿½ï¿½
     * @return Ö§ï¿½ï¿½ï¿½ï¿½Ò³ï¿½Ð±ï¿½
     */
    Page<Payment> getPaymentsByUserId(String userId, Pageable pageable);

    /**
     * ï¿½ï¿½ï¿½ï¿½×´Ì¬ï¿½ï¿½Ñ¯Ö§ï¿½ï¿½ï¿½Ð±ï¿½
     * 
     * @param status Ö§ï¿½ï¿½×´Ì¬
     * @param pageable ï¿½ï¿½Ò³ï¿½ï¿½ï¿½ï¿½
     * @return Ö§ï¿½ï¿½ï¿½ï¿½Ò³ï¿½Ð±ï¿½
     */
    Page<Payment> getPaymentsByStatus(Payment.PaymentStatus status, Pageable pageable);

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½Ê½ï¿½ï¿½Ñ¯Ö§ï¿½ï¿½ï¿½Ð±ï¿½
     * 
     * @param paymentMethod Ö§ï¿½ï¿½ï¿½ï¿½Ê½
     * @param pageable ï¿½ï¿½Ò³ï¿½ï¿½ï¿½ï¿½
     * @return Ö§ï¿½ï¿½ï¿½ï¿½Ò³ï¿½Ð±ï¿½
     */
    Page<Payment> getPaymentsByPaymentMethod(Payment.PaymentMethod paymentMethod, Pageable pageable);

    /**
     * ï¿½ï¿½Ñ¯Ö¸ï¿½ï¿½Ê±ï¿½ä·¶Î§ï¿½Úµï¿½Ö§ï¿½ï¿½ï¿½ï¿½Â¼
     * 
     * @param startTime ï¿½ï¿½Ê¼Ê±ï¿½ï¿½
     * @param endTime ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½
     * @return Ö§ï¿½ï¿½ï¿½Ð±ï¿½
     */
    List<Payment> getPaymentsByTimeRange(LocalDateTime startTime, LocalDateTime endTime);

    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±Ö§ï¿½ï¿½
     * 
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     */
    int processTimeoutPayments();

    /**
     * ï¿½ï¿½ï¿½ï¿½Ê§ï¿½Üµï¿½Ö§ï¿½ï¿½
     * 
     * @param paymentNo Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @return ï¿½ï¿½ï¿½Ôºï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
     */
    Payment retryFailedPayment(String paymentNo);

    /**
     * Í³ï¿½ï¿½ï¿½Ã»ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿?
     * 
     * @param userId ï¿½Ã»ï¿½ID
     * @param status Ö§ï¿½ï¿½×´Ì¬
     * @return Ö§ï¿½ï¿½ï¿½Ü½ï¿½ï¿?
     */
    BigDecimal sumAmountByUserIdAndStatus(String userId, Payment.PaymentStatus status);

    /**
     * Í³ï¿½ï¿½Ö§ï¿½ï¿½ï¿½É¹ï¿½ï¿½ï¿½
     * 
     * @param startTime ï¿½ï¿½Ê¼Ê±ï¿½ï¿½
     * @param endTime ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½
     * @return Ö§ï¿½ï¿½ï¿½É¹ï¿½ï¿½ï¿½
     */
    Double calculateSuccessRate(LocalDateTime startTime, LocalDateTime endTime);

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * 
     * @return Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     */
    String generatePaymentNo();

    /**
     * ï¿½ï¿½Ö¤Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * 
     * @param payment Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @return ï¿½Ç·ï¿½ï¿½ï¿½Ð§
     */
    boolean validatePayment(Payment payment);

    /**
     * ï¿½ï¿½ï¿½ï¿½Ö§ï¿½ï¿½Í¨Öª
     * 
     * @param payment Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param notificationType Í¨Öªï¿½ï¿½ï¿½ï¿½
     */
    void sendPaymentNotification(Payment payment, String notificationType);
} 
